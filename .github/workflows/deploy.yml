name: Build and Deploy to Cloudflare

on:
  push:
    branches:
      - main # Production deployment
      - dev-lv # Development deployment

permissions:
  contents: read

env:
  # Set environment based on branch
  ENVIRONMENT: ${{ github.ref_name == 'dev-lv' && 'development' || 'production' }}

  # Set Cloudflare project name
  PROJECT_NAME: integra-explorer-platform

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Generate version
        id: version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION="${BRANCH_NAME}-${GITHUB_SHA:0:8}-$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Fetch build secrets from Infisical
        env:
          INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
          INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        run: |
          # Install Infisical CLI
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

          echo "Fetching secrets for environment: ${{ env.ENVIRONMENT }}"

          # Authenticate and get token
          TOKEN=$(infisical login --method=universal-auth \
            --client-id="$INFISICAL_CLIENT_ID" \
            --client-secret="$INFISICAL_CLIENT_SECRET" \
            --plain --silent)

          # Export secrets to temp file
          INFISICAL_TOKEN="$TOKEN" infisical export \
            --projectId="$INFISICAL_PROJECT_ID" \
            --env=${{ env.ENVIRONMENT }} \
            --path=/apps/integra-trust-app \
            --format=dotenv > /tmp/secrets.env

          # Debug - check if secrets were exported
          echo "Exported secrets count: $(wc -l < /tmp/secrets.env)"
          echo "VITE variables found:"
          grep '^VITE_' /tmp/secrets.env | cut -d= -f1 || echo "No VITE variables found"

          # Export VITE_ variables to GitHub env for build step
          grep '^VITE_' /tmp/secrets.env | while IFS='=' read -r key value; do
            # Remove surrounding quotes if present
            value="${value%\'}"
            value="${value#\'}"
            value="${value%\"}"
            value="${value#\"}"
            echo "${key}=${value}" >> $GITHUB_ENV
          done

          rm /tmp/secrets.env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production
          # VITE_ variables now available from previous step

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx wrangler pages deploy dist --project-name=${{ env.PROJECT_NAME }} --branch=${{ github.ref_name }} --commit-dirty=true

      - name: Visual Testing - Capture Screenshot
        run: |
          # Wait for deployment to propagate
          sleep 10

          # Determine the URL based on branch
          if [[ "${{ github.ref_name }}" == "dev-lv" ]]; then
            TEST_URL="https://dev-lv.${{ env.PROJECT_NAME }}.pages.dev"
          else
            TEST_URL="https://${{ env.PROJECT_NAME }}.pages.dev"
          fi

          echo "Capturing screenshot of: $TEST_URL"

          # Call the screenshot worker
          curl -f "https://integra-screenshot.dfisher-3f3.workers.dev/?url=$TEST_URL" \
            -o screenshot-${{ github.ref_name }}-${{ github.sha }}.png

          echo "Screenshot captured successfully"
        continue-on-error: true

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshot-${{ github.ref_name }}-${{ github.sha }}
          path: screenshot-${{ github.ref_name }}-${{ github.sha }}.png
          retention-days: 30

      - name: Deployment Summary
        run: |
          echo "==============================================="
          echo "Deployment Configuration:"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Environment: ${{ env.ENVIRONMENT }}"
          echo "  Project: ${{ env.PROJECT_NAME }}"
          echo "  Version: ${{ steps.version.outputs.version }}"
          echo "  Cloudflare Account: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          echo "==============================================="
          echo ""
          echo "Deployment to Cloudflare Pages complete!"
          echo ""
          if [[ "${{ github.ref_name }}" == "dev-lv" ]]; then
            echo "Development URL: https://dev-lv.${{ env.PROJECT_NAME }}.pages.dev"
          else
            echo "Production URL: https://${{ env.PROJECT_NAME }}.pages.dev"
          fi
